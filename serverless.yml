service: voiceUpload

provider:
  name: aws
  runtime: nodejs12.x
  profile: aulab
  region: ap-northeast-2
  environment:
    USER_TABLE: aulab-voice-user-table
    ALARM_TABLE: aulab-voice-alarm-table
    FRIEND_TABLE: aulab-voice-friend-table
  # Provide permissions for this service to manipulate S3.
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: "arn:aws:s3:::aulab-voice-bucket/*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource: "*"

# Expose function to public API for POST requests.
functions:
  voices:
    handler: upload.requestUploadURL
    events:
      - http:
          path: voices
          method: post
          cors: true
  downloads:
    handler: download.requestDownloadURL
    events:
      - http:
          path: voice
          method: get
          cors: true
  InsertUser:
    handler: user.insert
    events:
      - http:
          path: user
          method: post
          cors: true
  EditUser:
    handler: user.edit
    events:
      - http:
          path: user
          method: put
          cors: true
  DelteUser:
    handler: user.delete
    events:
      - http:
          path: user/{id}
          method: delete
          cors: true
  GetUser:
    handler: user.get
    events:
      - http:
          path: user/{id}
          method: get
          cors: true

  InsertFriend:
    handler: friend.insert
    events:
      - http:
          path: friend
          method: post
          cors: true
  EditFriend:
    handler: friend.edit
    events:
      - http:
          path: friend
          method: put
          cors: true
  DelteFriend:
    handler: friend.delete
    events:
      - http:
          path: friend/{id}
          method: delete
          cors: true
  GetFriend:
    handler: friend.get
    events:
      - http:
          path: friend/{id}
          method: get
          cors: true

  InsertAlarm:
    handler: alarm.insert
    events:
      - http:
          path: alarm
          method: post
          cors: true
  EditAlarm:
    handler: alarm.edit
    events:
      - http:
          path: alarm
          method: put
          cors: true
  DelteAlarm:
    handler: alarm.delete
    events:
      - http:
          path: alarm/{id}
          method: delete
          cors: true
  GetAlarm:
    handler: alarm.get
    events:
      - http:
          path: alarm/{id}
          method: get
          cors: true
# Give service access to the specific S3 bucket.
resources:
  Resources:
    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: aulab-voice-bucket
        AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
          - AllowedMethods:
            - GET
            - PUT
            - POST
            - HEAD
            AllowedOrigins:
            - "*"
            AllowedHeaders:
            - "*"
    UserDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "uuid"
            AttributeType: "S"
          - AttributeName: "type"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "uuid"
            KeyType: "HASH"
          - AttributeName: "type"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.USER_TABLE}
    FriendDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "uuid"
            AttributeType: "S"
          - AttributeName: "type"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "uuid"
            KeyType: "HASH"
          - AttributeName: "type"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.FRIEND_TABLE}
    AlarmDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "receiver_id"
            AttributeType: "S"
          - AttributeName: "time"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "receiver_id"
            KeyType: "HASH"
          - AttributeName: "time"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.ALARM_TABLE}
